{"meta":{"title":"荣先森","subtitle":null,"description":null,"author":"Rong","url":"http://SlectRxz.github.io"},"pages":[],"posts":[{"title":"算法","slug":"first","date":"2018-10-14T13:58:57.005Z","updated":"2018-10-14T13:58:57.099Z","comments":true,"path":"2018/10/14/first/","link":"","permalink":"http://SlectRxz.github.io/2018/10/14/first/","excerpt":"","text":"算法- 0-1背包问题问题描述： 有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 这个问题的特点是：每种物品只有一件，可以选择放或者不放。（放是1，不放是0） D[i][j]=max(D[i-1][j],D[i-1][j-v[i]]+b[i]);D[i][j]表示第前i件物品，j是其背包的容量，其价值用二维词典D[ ][ ]记录其值储存不同的j（背包容量）能装的最大价值 [TOC] Introducing Markdown 问题描述： 有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 这个问题的特点是：每种物品只有一件，可以选择放或者不放。（放是1，不放是0） D[i][j]=max(D[i-1][j],D[i-1][j-v[i]]+b[i]);D[i][j]表示第前i件物品，j是其背包的容量，其价值用二维词典D[ ][ ]记录其值储存不同的j（背包容量）能装的最大价值 Code block123456789101112131415161718192021222324252627282930#include&lt;iostream&gt;#define MAX 20#define max(a,b) a&gt;b?a:busing namespace std;int D[MAX][MAX];int fill(int n,int v[],int b[],int c)&#123; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=c;j++) &#123; If( j&lt;v[ I ] ) D[i][j]=D[i-1][j]; else D[i][j]=max(D[i-1][j],D[i-1][j-v[i]]+b[i]);//解释：当背包的容量慢慢增加，此时大于这个物品v[i]，那么，我们需要判断//放物品 与 不放物品的价值哪个高。。。。。 &#125; return 1;&#125;int main()&#123; int n,v[MAX],b[MAX],c; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;v[i]; for(int i=1;i&lt;=n;i++) cin&gt;&gt;b[i]; cin&gt;&gt;c; fill(n,v,b,c); cout&lt;&lt;D[n][c];&#125;","categories":[],"tags":[]},{"title":"My first blog","slug":"hello-world","date":"2018-10-14T07:40:00.425Z","updated":"2018-10-15T04:01:34.719Z","comments":true,"path":"2018/10/14/hello-world/","link":"","permalink":"http://SlectRxz.github.io/2018/10/14/hello-world/","excerpt":"","text":"博客搭建记录找了很多教程，也看了一些视频，最后终于将其搭建好了，第一次写，有误请指正。 ####搭建环境准备： 安装Git：Git下载包64位. 下载node.js node.js下载地址 安装Hexo 利用npm命令即可安装。单击鼠标i右键，选着Git Bash图1","categories":[],"tags":[]}]}